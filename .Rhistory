library(gapminder)
library(dplyr)
library(ggplot2)
library(testthat)
library(tidyverse)
library(gapminder)
library(dplyr)
library(ggplot2)
library(testthat)
library(tidyverse)
library(gapminder)
library(dplyr)
library(ggplot2)
library(testthat)
avg_var(data = continent_ghg, y = Continent, na.rm = TRUE)
avg_group_var <- function(.data, x, na.rm = FALSE, ...) {
.data %>%
group_by({{x}}, ...) %>%
summarise(across(.cols = where(is.numeric), mean, na.rm = TRUE))
}
avg_group_var <- function(.data, x, .cols, na.rm = TRUE, ...) {
.data %>%
group_by({{x}}, ...) %>%
summarise(across(.cols = where(is.numeric), mean))
}
islands
summary(islands)
avg_group_var(islands)
avg_group_var <- function(.data, x, .cols, na.rm = TRUE, ...) {
.data %>%
group_by(...) %>%
summarise(across(.cols = where(is.numeric), mean))
}
avg_group_var(islands)
avg_group_var <- function(.data, .cols, na.rm = TRUE, ...) {
group_by(.data, ...) %>%
summarise(across(.cols = where(is.numeric), mean))
}
avg_group_var(.data = penguins, species, na.rm = TRUE)
avg_group_var(.data = penguins, species, na.rm = FALSE)
avg_group_var <- function(.data, y, na.rm = TRUE, ...) {
group_by(.data, y, ...) %>%
summarise(across(.cols = where(is.numeric), mean))
}
avg_group_var(.data = penguins, species, na.rm = FALSE)
avg_group_var(.data = penguins, y = species, na.rm = FALSE)
avg_group_var <- function(.data, y, na.rm = TRUE, ...) {
group_by(.data, {{y}}, ...) %>%
summarise(across(.cols = where(is.numeric), mean))
}
avg_group_var(.data = penguins, y = species, na.rm = FALSE)
avg_group_var(.data = penguins, y = species)
avg_group_var(.data = penguins, y = species, na.rm = TRUE)
avg_group_var <- function(.data, y, na.rm = FALSE, ...) {
group_by(.data, {{y}}, ...) %>%
summarise(across(.cols = where(is.numeric), mean))
}
avg_group_var(.data = penguins, y = species, na.rm = TRUE)
#avg_var(data = penguins, y = species, na.rm = TRUE)
avg_var(data = penguins, y = species, na.rm = TRUE)
avg_group_var <- function(.data, y, na.rm = FALSE, ...) {
group_by(.data, {{y}}, ...) %>%
summarise(across(where(is.numeric), mean))
}
avg_group_var(.data = penguins, y = species, na.rm = TRUE)
avg_group_var <- function(.data, y, na.rm = FALSE, ...) {
.data %>%
group_by({{y}}, ...) %>%
summarise(across(where(is.numeric), mean))
}
avg_group_var(.data = penguins, y = species, na.rm = TRUE)
avg_group_var <- function(.data, y, na.rm = FALSE, ...) {
.data %>%
group_by({{y}}, ...) %>%
summarise(across(where(is.numeric), mean, na.rm =TRUE))
}
avg_group_var(.data = penguins, y = species, na.rm = TRUE)
avg_group_var(.data = penguins, y = species, na.rm = TRUE)
avg_group_var(data = continent_ghg, y = Continent, na.rm = TRUE)
avg_group_var(.data = continent_ghg, y = Continent, na.rm = TRUE)
avg_group_var(.data = continent_ghg, y = Continent, na.rm = TRUE)
gapminder
avg_group_var(.data = gapminder, y = country, na.rm = TRUE)
gapminder
avg_group_var(.data = gapminder, y = country, na.rm = TRUE)
avg_group_var(.data = gapminder, y = country + year, na.rm = TRUE)
avg_group_var(.data = gapminder, y = country & year, na.rm = TRUE)
avg_group_var(.data = gapminder, y = country, y=  year, na.rm = TRUE)
avg_group_var(.data = continent_ghg, y = c(Continen, Year), na.rm = TRUE)
avg_group_var(.data = continent_ghg, y = Continent, na.rm = TRUE)
avg_cols_group <- function(.data, y, na.rm = FALSE, ...) {
.data %>%
group_by({{}},{{y}}, ...) %>%
summarise(across(where(is.numeric), mean, na.rm = TRUE))
}
avg_cols_group <- function(.data, y, na.rm = FALSE, ...) {
.data %>%
group_by({{x}},{{y}}, ...) %>%
summarise(across(where(is.numeric), mean, na.rm = TRUE))
}
avg_group_var(.data = penguins, y = species, na.rm = TRUE)
avg_group_var(.data = continent_ghg, y = Continent, na.rm = TRUE)
avg_group_var(.data = gapminder, x = country, y = year, na.rm = TRUE)
avg_group_var(.data = gapminder, y = country, na.rm = TRUE)
emissions
mtcars
avg_group_var(.data = mtcars, y = cyl, na.rm = TRUE)
avg_group_var(.data = gapminder, y = country, na.rm = TRUE)
avg_cols_group <- function(.data, y, na.rm = FALSE, ...) {
.data %>%
group_by({{y}}, {{...}}) %>%
summarise(.col = across(where(is.numeric), mean, na.rm = TRUE))
}
avg_cols_group <- function(.data, y, na.rm = FALSE, ...) {
.data %>%
group_by({{y}}, {{...}}) %>%
summarise(.col = across(where(is.numeric), mean, na.rm = TRUE))
}
avg_cols_group(.data = penguins, y = species, na.rm = TRUE)
avg_cols_group <- function(.data, y, na.rm = FALSE, ...) {
.data %>%
group_by({{y}}, {{...}}) %>%
summarise(across(where(is.numeric), mean, na.rm = TRUE))
}
avg_cols_group(.data = penguins, y = species, na.rm = TRUE)
avg_cols_group(.data = mtcars, y = cyl, na.rm = TRUE)
avg_cols_group(.data = gapminder, y = country, na.rm = TRUE)
library(tidyverse)
library(dplyr)
library(ggplot2)
library(testthat)
library(palmerpenguins)
library(gapminder)
avg_cols_group(.data = mtcars, y = cyl, na.rm = TRUE)
avg_cols_group(.data = gapminder, y = country, na.rm = TRUE)
gapminder
avg_cols_group(.data = gapminder, y = country, na.rm = TRUE)
avg_cols_group(.data = penguins, y = species, na.rm = TRUE)
avg_cols_group(.data = penguins, y = species, na.rm = TRUE) %>%
ggplot(aes(x = flipper_length_mm, y= body_mass_g)) +
geom_point()
avg_cols_group(.data = penguins, y = species, na.rm = TRUE) %>%
ggplot(aes(x = flipper_length_mm, y = body_mass_g)) +
geom_point() +
theme_minimal()
avg_cols_group(.data = penguins, y = species, na.rm = TRUE) %>%
ggplot(aes(x = flipper_length_mm, y = body_mass_g, gfill = species)) +
geom_point() +
theme_minimal() +
avg_cols_group(.data = penguins, y = species, na.rm = TRUE) %>%
ggplot(aes(x = flipper_length_mm, y = body_mass_g, gfill = species)) %>%
geom_point() +
theme_minimal() +
avg_cols_group(.data = penguins, y = species, na.rm = TRUE) %>%
ggplot(aes(x = flipper_length_mm, y = body_mass_g, fill = species)) +
geom_point() +
theme_minimal()
avg_cols_group(.data = penguins, y = species, na.rm = TRUE) %>%
ggplot(aes(x = flipper_length_mm, y = body_mass_g, fill = species)) +
geom_point()
avg_cols_group(.data = penguins, y = species, na.rm = TRUE) %>%
ggplot(aes(x = flipper_length_mm, y = body_mass_g, fill = species)) +
geom_point() +
theme_minimal()+
scale_fill_brewer(palette = "Spectral")
avg_cols_group(.data = penguins, y = species, na.rm = TRUE) %>%
ggplot(aes(x = flipper_length_mm, y = body_mass_g, fill = species)) +
geom_point() +
theme_minimal()+
scale_fill_brewer(palette = "Spectral")
avg_cols_group(.data = penguins, y = species, na.rm = TRUE) %>%
ggplot(aes(x = flipper_length_mm, y = body_mass_g, fill = species)) +
geom_point() +
theme_minimal()+
scale_fill_brewer(palette = "Spectral")
avg_cols_group(.data = penguins, y = species, na.rm = TRUE)
avg_cols_group(.data = penguins, y = species, na.rm = TRUE) %>%
ggplot(aes(x = flipper_length_mm, y = body_mass_g)) +
geom_point(fill = species) +
theme_minimal()+
scale_fill_brewer(palette = "Spectral")
avg_cols_group(.data = penguins, y = species, na.rm = TRUE) %>%
ggplot(aes(x = flipper_length_mm, y = body_mass_g)) +
geom_point(aes(fill = species)) +
theme_minimal()+
scale_fill_brewer(palette = "Spectral")
avg_cols_group(.data = penguins, y = species, na.rm = TRUE) %>%
ggplot(aes(x = species, y = body_mass_g)) +
geom_col() +
theme_minimal()
avg_cols_group(.data = penguins, y = species, na.rm = TRUE) %>%
ggplot(aes(x = flipper_length_mm, y = body_mass_g, fill = species)) +
geom_point() +
theme_minimal()+
scale_fill_brewer(palette = "Spectral")
avg_cols_group(.data = penguins, y = species, na.rm = TRUE) %>%
ggplot(aes(x = flipper_length_mm, y = body_mass_g, fill = "red")) +
geom_point() +
theme_minimal()+
scale_fill_brewer(palette = "Spectral")
avg_cols_group(.data = penguins, y = species, na.rm = TRUE) %>%
ggplot(aes(x = flipper_length_mm, y = body_mass_g, fill = steelblue)) +
geom_point() +
theme_minimal()+
scale_fill_brewer(palette = "Spectral")
avg_cols_group(.data = penguins, y = species, na.rm = TRUE) %>%
ggplot(aes(x = flipper_length_mm, y = body_mass_g, fill = species)) +
geom_point() +
theme_minimal()
avg_cols_group(.data = penguins, y = species, na.rm = TRUE) %>%
ggplot(aes(x = flipper_length_mm, y = body_mass_g, colour = species)) +
geom_point() +
theme_minimal()
avg_cols_group(.data = penguins, y = species, na.rm = TRUE)
avg_cols_group(.data = penguins, y = species, na.rm = TRUE) %>%
ggplot(aes(x = flipper_length_mm, y = body_mass_g, colour = species)) +
geom_point() +
theme_minimal()
avg_cols_group(.data = penguins, y = species, na.rm = TRUE)
avg_cols_group(.data = penguins, y = species, na.rm = TRUE) %>%
ggplot(aes(x = flipper_length_mm, y = body_mass_g, colour = species)) +
geom_point() +
theme_minimal()
avg_cols_group(.data = penguins, y = species, na.rm = TRUE)
avg_cols_group(.data = penguins, y = species, na.rm = TRUE) %>%
ggplot(aes(x = flipper_length_mm, y = body_mass_g, colour = species)) +
geom_point() +
theme_minimal() +
xlim(0, ) +
ylim(0, )
avg_cols_group(.data = penguins, y = species, na.rm = TRUE) %>%
ggplot(aes(x = flipper_length_mm, y = body_mass_g, colour = species)) +
geom_point() +
theme_minimal()
avg_cols_group(.data = penguins, y = species, na.rm = TRUE)
avg_cols_group(.data = penguins, y = species, na.rm = TRUE)
avg_cols_group(.data = penguins, y = species, na.rm = TRUE) %>%
ggplot(aes(x = flipper_length_mm, y = body_mass_g, colour = species)) +
geom_point() +
theme_minimal() +
xlim(0, 225) +
ylim(0, 5200)
avg_cols_group(.data = penguins, y = species, na.rm = TRUE)
avg_cols_group(.data = penguins, y = species, na.rm = TRUE) %>%
ggplot(aes(x = flipper_length_mm, y = body_mass_g, colour = species)) +
geom_point() +
theme_minimal() +
xlim(0, 250) +
ylim(0, 5500)
avg_cols_group(.data = penguins, y = species, na.rm = TRUE)
avg_cols_group(.data = penguins, y = species, na.rm = TRUE) %>%
ggplot(aes(x = flipper_length_mm, y = body_mass_g, colour = species)) +
geom_point() +
theme_minimal() +
xlim(0, 250) +
ylim(0, 6000)
a <- 1:5
tibble(a, b = a * 2, c = 1)
a <- 1:5
test_tbl <- tibble(a, b = a * 2, c = 1)
a <- 1:5
test_tbl <- tibble(a, b = a * 2, c = 1)
a <- 1:5
tibble(a, b = a * 2, c = 1)
test_tbl <- tibble(a, b = a * 2, c = 1)
test_that("Basic testing", {
expect_equal(avg_cols_group(), )
avg_cols_group(test_tbl)
a <- 1:5
tibble(a, b = a * 2, c = 1)
test_tbl <- tibble(a, b = a * 2, c = 1)
test_that("Basic testing", {
expect_equal(avg_cols_group(test_tbl), mean(c(1:5, 2:10, 1)) )
})
a <- 1:5
tibble(a, b = a * 2, c = 1)
test_tbl <- tibble(a, b = a * 2, c = 1)
test_that("Basic testing", {
expect_equal(avg_cols_group(test_tbl), mean(c(1:5), c(2:10), 1))
})
a <- 1:5
tibble(a, b = a * 2, c = 1)
test_tbl <- tibble(a, b = a * 2, c = 1)
test_that("Basic testing", {
expect_equal(avg_cols_group(test_tbl), mean(a, b, c))
})
a <- 1:5
tibble(a, b = a * 2, c = 1)
test_tbl <- tibble(a, b = a * 2, c = 1)
test_that("Basic testing", {
expect_equal(avg_cols_group(test_tbl), mean(test_tbl$a, test_tbl$b, test_tbl$c)
})
avg_cols_group(test_tbl)
a <- 1:5
tibble(a, b = a * 2, c = 1)
test_tbl <- tibble(a, b = a * 2, c = 1)
test_that("Basic testing", {
expect_equal(avg_cols_group(test_tbl), as_tibble(mean(a, b, c)))
})
a <- 1:5
b <- a * 2
c <- 1
tibble(a, b , c )
a <- 1:5
b <- a * 2
c <- 1
tibble(a, b , c )
test_tbl <- tibble(a, b , c )
test_that("Basic testing", {
expect_equal(avg_cols_group(test_tbl), as_tibble(mean(a, b, c)))
})
avg_cols_group(test_tbl)
a <- 1:5
b <- a * 2
c <- 1
tibble(a, b, c)
test_tbl <- tibble(a, b, c)
test_that("Basic testing", {
expect_equal(avg_cols_group(test_tbl), as_tibble(3,6,1))
})
a <- 1:5
b <- a * 2
c <- 1
tibble(a, b, c)
test_tbl <- tibble(a, b, c)
test_that("Basic testing", {
expect_equal(avg_cols_group(test_tbl), as_tibble(c(3, 6, 1)))
})
a <- 1:5
b <- a * 2
c <- 1
tibble(a, b, c)
test_tbl <- tibble(a, b, c)
test_vector <- c(1, 5, 4, 9, 0)
test_that("Basic testing", {
expect_equal(avg_cols_group(test_tbl), as_tibble(c(3, 6, 1)))
})
avg_cols_group <- function(.data, y, na.rm = FALSE, ...) {
if(!is.data.frame(.data)) {
stop('I am so sorry, but this function only works for data frame inputs!\n',
'You have provided an object of class: ', class(.data)[1])
}
.data %>%
group_by({{y}}, {{...}}) %>%
summarise(across(where(is.numeric), mean, na.rm = TRUE))
avg_cols_group(.data = gapminder, y = country, na.rm = TRUE)
avg_cols_group(.data = gapminder, y = country, na.rm = TRUE)
gapminder
avg_cols_group(.data = gapminder, y = country, na.rm = TRUE)
test_that("Basic testing", {
expect_error(avg_cols_group(test_vector), "I am so sorry, but this function only works for data frame inputs!")
})
a <- c(red, green, blue, orange, yellow)
a <- red, green, blue, orange, yellow
a <- c("red", "green", "blue", "orange", "yellow")
b <- 1:5
c <- b * 2
d <- 1
tibble(a, b, c, d)
test_tbl <- tibble(a, b, c)
test_vector <- c(1, 5, 4, 9, 0)
test_that("Basic testing", {
expect_equal(avg_cols_group(test_tbl), as_tibble(c(3, 6, 1)))
})
a <- c("red", "green", "blue", "orange", "yellow")
b <- 1:5
c <- b * 2
d <- 1
tibble(a, b, c, d)
tibble(a, b, c, d)
test_tbl <- tibble(a, b, c, d)
test_tbl
a <- c("red", "green", "blue", "orange", "yellow")
b <- 1:5
c <- b * 2
d <- 1
tibble(a, b, c, d)
test_tbl <- tibble(a, b, c, d)
test_vector <- c(1, 5, 4, 9, 0)
test_that("Basic testing", {
expect_equal(avg_cols_group(test_tbl), as_tibble(c(3, 6, 1)))
})
test_tbl
test_tbl
test_that("Basic testing", {
expect_equal(avg_cols_group(test_tbl), as_tibble(c(3, 6, 1)))
})
as_tibble(c(3, 6, 1))
avg_cols_group(test_tbl)
as_tibble(3, 6, 1)
avg_cols_group(test_tbl)
as.data.frame(c(3, 6, 1))
as.data.frame(3, 6, 1)
avg_cols_group(test_tbl)
test_that("Basic testing", {
expect_error(avg_cols_group(test_vector), "I am so sorry, but this function only works for data frame inputs!")
})
test_that("Basic testing", {
expect_error(avg_cols_group(test_vector))
})
avg_cols_group(penguins, y=species)
avg_cols_group(.data = penguins, y = species)
penguins
avg_cols_group(.data = penguins, y = species)
test_that("Basic testing", {
expect_named(avg_cols_group(.data = penguins, y = species), c("species", "bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g", "year"))
})
#Expect only output column names corresponding to the numeric columns (in this example, "island" & "sex" columns should not be in the output)
test_that("The function outputs only the grouping column(s) plus columns containing numeric data", {
expect_named(avg_cols_group(.data = penguins, y = species), c("species", "bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g", "year"))
})
avg_cols_group(test_tbl)
data.frame(3, 6, 1)
avg_cols_group(test_tbl)
test_tbl <- as.data.frame(a, b, c, d)
data.frame(a, b, c, d)
a <- c("red", "green", "blue", "orange", "yellow")
b <- 1:5
c <- b * 2
d <- 1
data.frame(a, b, c, d)
test_df <- data.frame(a, b, c, d)
a <- c("red", "green", "blue", "orange", "yellow")
b <- 1:5
c <- b * 2
d <- 1
data.frame(a, b, c, d)
sample_df <- data.frame(a, b, c, d)
sample_vector <- c(1, 5, 4, 9, 0)
test_that("Error occurs when input is not a data frame", {
expect_error(avg_cols_group(dummy_vector))
})
test_that("The function outputs only the grouping column(s) plus columns containing numeric data", {
expect_named(avg_cols_group(.data = penguins, y = species), c("species", "bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g", "year"))
})
est_that("Basic testing", {
expect_equal(avg_cols_group(dummy_df), data.frame(3, 6, 1))
})
test_that("Basic testing", {
expect_equal(avg_cols_group(dummy_df), data.frame(3, 6, 1))
})
a <- c("red", "green", "blue", "orange", "yellow")
b <- 1:5
c <- b * 2
d <- 1
data.frame(a, b, c, d)
dummy_df <- data.frame(a, b, c, d)
dummy_vector <- c(1, 5, 4, 9, 0)
avg_cols_group(dummy_df, y = a)
data.frame(a, b, c, d)
avg_cols_group(dummy_df)
avg_cols_group(dummy_df)
data.frame(3, 6, 1)
avg_cols_group(dummy_df)
tibble(3, 6, 1)
avg_cols_group(dummy_df)
avg_cols_group(dummy_df)
tibble(b = mean(1:5), c= mean(2 *(1:5)), c = mean(1)
mean(2 *(1:5))
mean(2 *(1:5))
test_that("Basic testing", {
expect_equal(avg_cols_group(dummy_df), tibble(b = mean(1:5), c = mean(2 *(1:5)), c = mean(1)))
})
tibble(b = mean(1:5), c = mean(2 *(1:5)), d = mean(1))
test_that("Basic testing", {
expect_equal(avg_cols_group(dummy_df), tibble(b = mean(1:5), c = mean(2 *(1:5)), d = mean(1)))
})
dummy_vector <- c(1, 5, 4, 9, 0)
test_that("Error occurs when input is not of the class data.frame", {
expect_error(avg_cols_group(dummy_vector))
})
test_that("Function output is equual to the exact values & format specified, as calculated by hand", {
expect_equal(avg_cols_group(dummy_df), tibble(b = mean(1:5), c = mean(2 *(1:5)), d = mean(1)))
})
a <- c("red", "green", "blue", "orange", "yellow")
b <- 1:5
c <- b * 2
d <- 1
dummy_df <- data.frame(a, b, c, d)
dummy_df
avg_cols_group(.data = mtcars, y = cyl, na.rm = TRUE)
avg_cols_group(.data = gapminder, y = country, na.rm = TRUE)
avg_cols_group(.data = penguins, y = species, na.rm = TRUE)
avg_cols_group(.data = penguins, y = species, na.rm = TRUE) %>%
ggplot(aes(x = flipper_length_mm, y = body_mass_g, colour = species)) +
geom_point() +
theme_minimal() +
xlim(0, 250) +
ylim(0, 6000)
library(tidyverse)
library(dplyr)
library(ggplot2)
library(testthat)
library(palmerpenguins)
library(gapminder)
library(devtools)
here::here()
create_package(~/Desktop/STAT545/asgmt.1+2_jlp/asgmt.b1.b2-jlp/)
create_package(~Desktop/STAT545/`asgmt.1+2_jlp`/asgmt.b1.b2-jlp)
.data %>%
group_by({{y}}, {{...}}) %>%
summarise(across(where(is.numeric), mean, na.rm = TRUE))
avg_cols_group <- function(.data, y, na.rm = FALSE, ...) {
if(!is.data.frame(.data)) {
stop('I am so sorry, but this function only works for data frame inputs!\n',
'You have provided an object of class: ', class(.data)[1])
}
.data %>%
group_by({{y}}, {{...}}) %>%
summarise(across(where(is.numeric), mean, na.rm = TRUE))
}
create_package("quick.group.calc")
