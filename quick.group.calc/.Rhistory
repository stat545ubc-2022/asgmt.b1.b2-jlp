#' @param y     the variable to group by. This is interpreted as a categorical variable. If left unspecified, the function will still work, though will simply be computing means of all rows since no grouping parameter was specified.
#' @param na.rm a logical value (TRUE / FALSE) indicating whether NA values should be stripped before the computation proceeds. If `FALSE` (the default), the result will be `NA` if any element of `y` or another grouping variable is `NA`.
#'
#' @return Returns a data frame containing to the average value of each numeric column per level of the grouping variable (if there is one, or more). With the exception of column names as the top row of the dataframe, each subsequent row of the dataframe corresponds to a grouping 'level', and contains the means -- for that level -- of all the numeric variables in the dataset.
#' @export
#'
#' @examples
#'
#'
#'
library(dplyr)
avg_cols_group(.data = mtcars, y = cyl, na.rm = TRUE)
avg_cols_group(.data = mtcars, y = cyl)
?avg_cols_group
avg_cols_group <- function(.data, y, na_rm = TRUE) {
.data %>%
dplyr::group_by({{y}}) %>%
dplyr::summarise(dplyr::across(tidyselect::where(is.numeric), mean, na.rm = na_rm))
}
avg_cols_group(.data = penguins, y = species)
library(dplyr)
library(tidyr)
library(palmerpenguins)
library(magrittr)
library(tidyselect)
avg_cols_group(.data = penguins, y = species)
palmerpenguins::penguins
should output a 3 x 6 tibble with one row corresponding to each penguin species, and each non-`species` column a numeric variable; the numbers in the output tibble should each correspond to the average of a specific numeric variable for a specific species (e.g., average bill_length_mm of Adelie penguins = 38.8)
#' @return Returns a data frame containing to the average value of each numeric column per level of the grouping variable (if there is one, or more). With the exception of column names as the top row of the dataframe, each subsequent row of the dataframe corresponds to a grouping 'level', and contains the means -- for that level -- of all the numeric variables in the dataset.
#' @export
#'
#' @examples
#' avg_cols_group(.data = mtcars, y = cyl)
#' should output a 3 x 11 tibble with one row corresponding to each `cyl` group (i.e., 4, 6, and 8 cylinder cars) and their respective mean values for each variable
#'
#' avg_cols_group(.data = palmerpenguins::penguins, y = species)
#' should output a 3 x 6 tibble with one row corresponding to each penguin species, and each non-`species` column a numeric variable; the numbers in the output tibble should each correspond to the average of a specific numeric variable for a specific species (e.g., average bill_length_mm of Adelie penguins = 38.8)
#'
avg_cols_group <- function(.data, y, na_rm = TRUE) {
.data %>%
dplyr::group_by({{y}}) %>%
dplyr::summarise(dplyr::across(tidyselect::where(is.numeric), mean, na.rm = na_rm))
}
#' Column Averages Per Group
#'
#' @description This function first identifies a grouping variable (taken as categorical). Inspecting across all columns of the data frame, this function then selects all of the numeric columns and calculates the means of each of those numeric columns for each group (i.e., level of the grouping variable, corresponding to particular rows).
#'
#' @param .data the data frame or data frame extension (e.g. tibble). We opted for the function name ".data" to avoid name collision with the `data()` function in base R packages.
#' @param y     the variable to group by. This is interpreted as a categorical variable. If left unspecified, the function will still work, though will simply be computing means of all rows since no grouping parameter was specified.
#' @param na_rm a logical value (TRUE / FALSE) indicating whether NA values should be stripped before the computation proceeds. If `TRUE` (the default), the calculation will first remove all `NA`s (if any element of `y` or another grouping variable is `NA`), and the result should therefore not contain `NA`s.
#'
#' @return Returns a data frame containing to the average value of each numeric column per level of the grouping variable (if there is one, or more). With the exception of column names as the top row of the dataframe, each subsequent row of the dataframe corresponds to a grouping 'level', and contains the means -- for that level -- of all the numeric variables in the dataset.
#' @export
#'
#' @examples
#' avg_cols_group(.data = mtcars, y = cyl)
#' should output a 3 x 11 tibble with one row corresponding to each `cyl` group (i.e., 4, 6, and 8 cylinder cars) and their respective mean values for each variable
#'
#' avg_cols_group(.data = palmerpenguins::penguins, y = species)
#' should output a 3 x 6 tibble with one row corresponding to each penguin species, and each non-`species` column a numeric variable; the numbers in the output tibble should each correspond to the average of a specific numeric variable for a specific species (e.g., average bill_length_mm of Adelie penguins = 38.8)
avg_cols_group <- function(.data, y, na_rm = TRUE) {
.data %>%
dplyr::group_by({{y}}) %>%
dplyr::summarise(dplyr::across(tidyselect::where(is.numeric), mean, na.rm = na_rm))
}
#should output a 3 x 6 tibble with one row corresponding to each penguin species, and each non-`species` column a numeric variable; the numbers in the output tibble should each correspond to the average of a specific numeric variable for a specific species (e.g., average bill_length_mm of Adelie penguins = 38.8)
document()
devtools::document()
library(devtools)
document()
document()
document()
document()
?avg_cols_group
document()
?avg_cols_group
document()
?avg_cols_group
library(quick.group.calc)
quick.group.calc::avg_cols_group(penguins)
quick.group.calc::avg_cols_group(penguins$species)
quick.group.calc::avg_cols_group(penguins, y = species)
use_testthat()
usethis::use_test()
document()
?avg_cols_group
devtools::test()
rm(list = c("avg_cols_group"))
devtools::test()
#' Column Averages Per Group
#'
#' @description This function first identifies a grouping variable (taken as categorical). Inspecting across all columns of the data frame, this function then selects all of the numeric columns and calculates the means of each of those numeric columns for each group (i.e., level of the grouping variable, corresponding to particular rows).
#'
#' @param .data   The data frame or data frame extension (e.g. tibble). We opted for the function name ".data" to avoid name collision with the `data()` function in base R packages.
#' @param y       The variable to group by. This is interpreted as a categorical variable. If left unspecified, the function will still work, though will simply be computing means of all rows since no grouping parameter was specified.
#' @param na_rm   A logical value (`TRUE` / `FALSE`) indicating whether `NA` values should be stripped before the computation proceeds. If `TRUE` (the default), the calculation will first remove all `NA`s (if any element of `y` or another grouping variable is `NA`), and the result should therefore not contain `NA`s.
#'
#' @return Returns a data frame containing to the average value of each numeric column per level of the grouping variable (if there is one, or more). With the exception of column names as the top row of the dataframe, each subsequent row of the data frame corresponds to a grouping 'level', and contains the means -- for that level -- of all the numeric variables in the data set.
#' @export
#'
#' @examples
#' avg_cols_group(.data = mtcars, y = cyl)
#'     # Should output a 3 x 11 tibble with one row corresponding to each `cyl` group
#'     # (4, 6, or 8 cylinder cars) as well as their mean values for each variable
#'
#' avg_cols_group(.data = palmerpenguins::penguins, y = species)
#'     # Should output a 3 x 6 tibble with one row corresponding to each penguin species,
#'     # and each non-`species` column a numeric variable;
#'     # numbers in the output tibble should each correspond to the average of a specific numeric variable
#'     # for a specific species (e.g., average bill_length_mm of Adelie penguins = 38.8)
avg_cols_group <- function(.data, y, na_rm = TRUE) {
.data %>%
dplyr::group_by({{y}}) %>%
dplyr::summarise(dplyr::across(tidyselect::where(is.numeric), mean, na.rm = na_rm))
}
check()
usethis::use_package("tibble")
check()
usethis::use_readme_rmd()
devtools::build_readme()
devtools::build_readme()
devtools::build_readme()
install.packages("devtools")
devtools::install_github("stat545ubc-2022/asgmt.b1.b2-jlp/tree/main/quick.group.calc", ref = "0.1.0")
devtools::install_github("stat545ubc-2022/asgmt.b1.b2-jlp/tree/main/quick.group.calc", ref = "0.1.0")
devtools::build_readme()
devtools::build_readme()
avg_cols_group(.data = palmerpenguins::penguins, y = species)
avg_cols_group <- function(.data, y, na_rm = TRUE) {
.data %>%
dplyr::group_by({{y}}) %>%
dplyr::summarise(dplyr::across(tidyselect::where(is.numeric), mean, na.rm = na_rm))
}
#' Column Averages Per Group
#'
#' @description This function first identifies a grouping variable (taken as categorical). Inspecting across all columns of the data frame, this function then selects all of the numeric columns and calculates the means of each of those numeric columns for each group (i.e., level of the grouping variable, corresponding to particular rows).
#'
#' @param .data   The data frame or data frame extension (e.g. tibble). We opted for the function name ".data" to avoid name collision with the `data()` function in base R packages.
#' @param y       The variable to group by. This is interpreted as a categorical variable. If left unspecified, the function will still work, though will simply be computing means of all rows since no grouping parameter was specified.
#' @param na_rm   A logical value (`TRUE` / `FALSE`) indicating whether `NA` values should be stripped before the computation proceeds. If `TRUE` (the default), the calculation will first remove all `NA`s (if any element of `y` or another grouping variable is `NA`), and the result should therefore not contain `NA`s.
#'
#' @return Returns a data frame containing to the average value of each numeric column per level of the grouping variable (if there is one, or more). With the exception of column names as the top row of the dataframe, each subsequent row of the data frame corresponds to a grouping 'level', and contains the means -- for that level -- of all the numeric variables in the data set.
#' @export
#'
#' @examples
#' avg_cols_group(.data = mtcars, y = cyl)
#'     # Should output a 3 x 11 tibble with one row corresponding to each `cyl` group
#'     # (4, 6, or 8 cylinder cars) as well as their mean values for each variable
#'
#' avg_cols_group(.data = palmerpenguins::penguins, y = species)
#'     # Should output a 3 x 6 tibble with one row corresponding to each penguin species,
#'     # and each non-`species` column a numeric variable;
#'     # numbers in the output tibble should each correspond to a specific numeric variable's average
#'     # for a specific species (e.g., average bill_length_mm of Adelie penguins = 38.8)
avg_cols_group <- function(.data, y, na_rm = TRUE) {
.data %>%
dplyr::group_by({{y}}) %>%
dplyr::summarise(dplyr::across(tidyselect::where(is.numeric), mean, na.rm = na_rm))
}
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.path = "man/figures/README-",
out.width = "100%"
)
install.packages("devtools")
devtools::install_github("stat545ubc-2022/asgmt.b1.b2-jlp/tree/main/quick.group.calc", ref = "0.1.0", auth_token = "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")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.path = "man/figures/README-",
out.width = "100%"
)
#install.packages("devtools")
#devtools::install_github("stat545ubc-2022/asgmt.b1.b2-jlp/tree/main/quick.group.calc", ref = "0.1.0", auth_token = "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")
library(quick.group.calc)
#install.packages("devtools")
devtools::install_github("stat545ubc-2022/asgmt.b1.b2-jlp/tree/main/quick.group.calc", ref = "0.1.0", auth_token = "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")
---
output: github_document
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.path = "man/figures/README-",
out.width = "100%"
)
#install.packages("devtools")
devtools::install_github("stat545ubc-2022/asgmt.b1.b2-jlp/tree/main/quick.group.calc", ref = "0.1.0", auth_token = "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")
#install.packages("devtools")
devtools::install_github("stat545ubc-2022/asgmt.b1.b2-jlp/tree/main/quick.group.calc", ref = "0.1.0")
#install.packages("devtools")
devtools::install_github("stat545ubc-2022/asgmt.b1.b2-jlp/tree/main/quick.group.calc", ref = "0.1.0", auth_token = "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")
